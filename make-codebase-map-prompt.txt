# COMPREHENSIVE CODEBASE MAPPING AND DEPENDENCY ANALYSIS INSTRUCTIONS

## OVERVIEW
This tool automatically creates and maintains a comprehensive codebase map with detailed dependency analysis. It uses dependency-cruiser for dependency scanning and an automated script for updating the codebase-map.json file.

## PREREQUISITES
- Node.js (v14 or higher)
- npm or yarn package manager
- Project must have a `src/` directory or similar source code structure

## QUICK START

### Step 1: Install Dependencies
```bash
# Install dependency-cruiser globally or locally
npm install -g dependency-cruiser
# OR
npm install dependency-cruiser --save-dev
```

### Step 2: Run Complete Fresh Scan
```bash
# Run complete fresh scan (dependency analysis + update)
node codebase_scanner/update-codebase-map.js freshscan
```

This single command will:
- Generate fresh dependency analysis using dependency-cruiser
- Create JSON, HTML, and SVG reports
- Update codebase-map.json with enhanced schema
- Create automatic backup before updating

## DETAILED WORKFLOW

### STEP 0: VALIDATION - Check Existing Codebase Map
**MANDATORY FIRST STEP:** Before proceeding, validate the existing codebase-map.json.

1. **Check if codebase-map.json exists:**
   ```bash
   if [ -f "codebase-map.json" ]; then
     echo "✅ codebase-map.json found"
   else
     echo "❌ codebase-map.json not found - create initial map first"
   fi
   ```

2. **If codebase-map.json exists, validate its currency:**
   ```bash
   # Check last modification time
   ls -la codebase-map.json
   
   # Check last modification time of source files
   find src/ -name "*.jsx" -o -name "*.js" -o -name "*.css" | head -10 | xargs ls -la
   
   # Compare timestamps
   if [ "codebase-map.json" -ot "src/App.jsx" ]; then
     echo "⚠️  codebase-map.json is older than source files - needs update"
   fi
   ```

### STEP 1: Install and Setup Dependency-Cruiser
1. **Install dependency-cruiser:**
   ```bash
   # Using npm
   npm install dependency-cruiser
   
   # OR using yarn
   yarn add dependency-cruiser
   ```

2. **Create depCruiser directory (if not exists):**
   ```bash
   mkdir -p codebase_scanner/depCruiser
   ```

### STEP 2: Run Complete Fresh Scan
**This step replaces all manual dependency-cruiser commands with a single automated command.**

1. **Run the fresh scan command:**
   ```bash
   node codebase_scanner/update-codebase-map.js freshscan
   ```

2. **The freshscan command automatically:**
   - Creates depCruiser directory if it doesn't exist
   - Generates JSON dependency report
   - Generates HTML dependency report (optional)
   - Generates SVG dependency graph (optional)
   - Creates backup of existing codebase-map.json
   - Updates all file entries with enhanced schema
   - Adds detailed dependency information
   - Includes file metadata (size, lines, language)
   - Updates dependency counts and types
   - Handles all files in the src/ directory recursively

### STEP 3: Validation and Verification
1. **Check the updated codebase-map.json:**
   ```bash
   # Verify JSON is valid
   python3 -m json.tool codebase-map.json > /dev/null && echo "✅ JSON is valid" || echo "❌ JSON has errors"
   
   # Count total files
   grep -c '"name":' codebase-map.json | head -1
   
   # Check for enhanced schema fields
   grep -c '"fileDetails"' codebase-map.json
   grep -c '"dependencyDetails"' codebase-map.json
   ```

2. **Compare with dependency-cruiser results:**
   ```bash
   # Count files in dependency-cruiser
   grep -c '"source":' codebase_scanner/depCruiser/dependency-report-new.json
   
   # Count files in codebase-map
   grep -c '"name":' codebase-map.json | head -1
   ```

## ALTERNATIVE COMMANDS

### Update Only (if dependency report already exists)
```bash
# Update codebase map only (requires existing dependency report)
node codebase_scanner/update-codebase-map.js update
```

### Show Help
```bash
# Show command usage and options
node codebase_scanner/update-codebase-map.js help
```

## JSON SCHEMA TEMPLATE
The updated codebase-map.json follows this enhanced schema:

```json
{
  "rootDirectory": "project-name",
  "subdirectories": [
    {
      "directory": "src",
      "files": [
        {
          "name": "Component.jsx",
          "description": "Component description",
          "lastUpdated": "2024-01-01",
          "dependencies": [
            {
              "name": "react",
              "type": "npm",
              "path": "node_modules/react",
              "dynamic": false,
              "circular": false,
              "valid": true,
              "followable": true
            }
          ],
          "testCoverage": "none",
          "dependents": [],
          "orphan": false,
          "valid": true,
          "moduleSystem": "es6",
          "fileDetails": {
            "size": "2.5K",
            "lines": 50,
            "language": "jsx",
            "entryPoint": false,
            "bundled": true,
            "treeShakeable": true,
            "sideEffects": false
          },
          "dependencyDetails": {
            "total": 3,
            "npm": 1,
            "local": 2,
            "core": 0,
            "dynamic": 0,
            "circular": 0,
            "unresolved": 0
          }
        }
      ],
      "subdirectories": []
    }
  ],
  "metadata": {
    "totalFiles": 50,
    "totalDependencies": 150,
    "dependencyAnalysis": {
      "source": "dependency-cruiser",
      "reportFile": "codebase_scanner/depCruiser/dependency-report-new.json",
      "analysisDate": "2024-01-01"
    }
  }
}
```

## TROUBLESHOOTING

### Common Issues:
1. **"codebase-map.json not found"**
   - Ensure you're running the script from the project root directory
   - Create an initial codebase-map.json if it doesn't exist

2. **"Dependency analysis failed"**
   - Check that dependency-cruiser is installed
   - Verify that src/ directory exists
   - Check Node.js version (v14 or higher)

3. **"Permission errors"**
   - Ensure you have read/write permissions for the project directory
   - Check file permissions for codebase-map.json

4. **"HTML/SVG generation failed"**
   - These are optional features
   - HTML generation requires dependency-cruiser
   - SVG generation requires Graphviz installation

### Validation Commands:
```bash
# Check script permissions
ls -la codebase_scanner/update-codebase-map.js

# Verify dependency-cruiser installation
npx dependency-cruiser --version

# Test script execution
node codebase_scanner/update-codebase-map.js help
```

## AUTOMATION TIPS

### Add to package.json scripts:
```json
{
  "scripts": {
    "fresh-scan": "node codebase_scanner/update-codebase-map.js freshscan",
    "update-map": "node codebase_scanner/update-codebase-map.js update",
    "codebase-analysis": "npm run fresh-scan"
  }
}
```

### Run complete analysis:
```bash
npm run fresh-scan
```

## IMPORTANT NOTES:
- The `freshscan` command is the recommended approach for complete analysis
- Always run freshscan when you want to ensure the latest dependency data
- The script creates automatic backups before making changes
- The tool works with any project structure that has a src/ directory
- All file paths are relative to the project root directory
- The enhanced schema includes comprehensive dependency and file metadata
- Backups are stored in `codebase_scanner/backups/` directory 