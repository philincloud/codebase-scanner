# COMPREHENSIVE CODEBASE MAPPING AND DEPENDENCY ANALYSIS INSTRUCTIONS

## ‚ö†Ô∏è CRITICAL WARNING
**IF codebase-map.json DOES NOT EXIST, YOU MUST PERFORM A MANUAL SCAN OF THE ENTIRE CODEBASE BEFORE USING ANY TOOLS.**
- Scan every directory to the deepest levels
- Document every single file
- Create a complete codebase-map.json manually
- **NO PARTIAL MAPPING**: Must create entire map in one go
- **NO SIZE LIMITS**: Include everything regardless of file size
- Only then proceed to dependency analysis

## OVERVIEW
This tool automatically creates and maintains a comprehensive codebase map with detailed dependency analysis. It uses dependency-cruiser for dependency scanning and an automated script for updating the codebase-map.json file.

**Key Features:**
- **Dependency Analysis**: Tracks all import/export relationships between files
- **Test File Detection**: Automatically finds and maps test files for each source file
- **Enhanced Metadata**: Includes file sizes, line counts, and language detection
- **Automatic Backups**: Creates timestamped backups before making changes
- **Filesystem Sync**: Removes deleted files and adds new files automatically

**Test File Detection:**
The tool automatically detects test files using common naming patterns:
- `.test.js`, `.test.jsx`, `.test.ts`, `.test.tsx`
- `.spec.js`, `.spec.jsx`, `.spec.ts`, `.spec.tsx`
- Files in `test/`, `tests/`, `__tests__/` directories
- Test files in the same directory as source files

When test files are found, the `testCoverage` field includes:
- `hasTests`: boolean indicating if tests exist
- `testFiles`: array of relative paths to test files
- `testCount`: number of test files found

## PREREQUISITES
- Node.js (v14 or higher)
- npm or yarn package manager
- Project must have a `src/` directory or similar source code structure

## üöÄ Quick Start

### Step 1: Clone the Codebase Scanner

**Clone the codebase scanner into your project root directory:**

```bash
# Clone the repository into your project root
git clone https://github.com/philincloud/codebase-scanner.git codebase_scanner

# Navigate into the codebase_scanner directory
cd codebase_scanner
```

### Step 2: Add Instructions to Your AI Agent

**Add `make-codebase-map-prompt.txt` to your agent context window and ask it to read and apply the instructions.**

Simply ask your AI agent:
> "Please read and apply the instructions from `make-codebase-map-prompt.txt` to analyze this codebase."

The AI agent will then:
- Read and understand the comprehensive instructions
- Install necessary dependencies (dependency-cruiser)
- Run the complete analysis workflow
- Generate all required reports and maps
- Handle any errors or edge cases automatically

## DETAILED WORKFLOW

### STEP 0: VALIDATION - Check Existing Codebase Map
**MANDATORY FIRST STEP:** Before proceeding, validate the existing codebase-map.json.

1. **Check if codebase-map.json exists:**
   ```bash
   if [ -f "codebase-map.json" ]; then
     echo "‚úÖ codebase-map.json found"
   else
     echo "‚ùå codebase-map.json not found - MANUAL SCAN REQUIRED"
   fi
   ```

2. **If codebase-map.json exists, validate its currency:**
   ```bash
   # Check last modification time
   ls -la codebase-map.json
   
   # Check last modification time of source files
   find src/ -name "*.jsx" -o -name "*.js" -o -name "*.css" | head -10 | xargs ls -la
   
   # Compare timestamps
   if [ "codebase-map.json" -ot "src/App.jsx" ]; then
     echo "‚ö†Ô∏è  codebase-map.json is older than source files - needs update"
   fi
   ```

### STEP 0.5: MANUAL CODEBASE SCAN (CRITICAL - IF NO codebase-map.json EXISTS)
**IF codebase-map.json DOES NOT EXIST, YOU MUST PERFORM A MANUAL SCAN FIRST.**

**MANDATORY MANUAL SCAN WORKFLOW:**

1. **Use tree command to get complete directory structure:**
   ```bash
   # Check if tree command is available
   if command -v tree &> /dev/null; then
     # Get complete tree structure of the project
     tree -a -I 'node_modules|.git' > complete_tree.txt
     
     # Also get tree with file sizes and details
     tree -a -h -I 'node_modules|.git' > complete_tree_detailed.txt
   else
     echo "‚ö†Ô∏è  tree command not found, using find instead"
     find . -type f -not -path './node_modules/*' -not -path './.git/*' > complete_tree.txt
   fi
   ```

2. **Scan the entire project structure manually:**
   - Use `list_dir` or similar tools to explore every directory
   - Go to the deepest levels of the directory tree
   - Document every single file and folder
   - Identify the root directory name
   - Map out the complete directory structure
   - **CRITICAL**: Cross-reference with tree command output to ensure nothing is missed

3. **Analyze each file individually:**
   - Read the contents of each file
   - Determine file type and language
   - Count lines of code
   - Identify file size
   - Understand the purpose and functionality
   - Note any obvious dependencies or imports
   - **Identify test files**: Look for `.test.`, `.spec.` files and test directories
   - **Map test relationships**: Note which test files correspond to which source files

4. **Create a comprehensive codebase-map.json manually:**
   - Follow the exact JSON schema provided below
   - Include every single file found in the scan
   - Provide detailed descriptions for each file
   - Set appropriate metadata for each file
   - Organize files into proper directory structure
   - Include file details like size, lines, language
   - **CHUNKED CREATION**: Create the JSON in chunks to avoid output limits
   - **COMPLETE COVERAGE**: Ensure every file from tree command is included
   - **VERIFICATION**: After each chunk, verify against tree command output
   - **EXISTENCE CHECK**: Check if codebase-map.json already exists before creating
   - **BACKUP**: If file exists, create backup before overwriting

5. **VERIFICATION - Ensure complete coverage:**
   ```bash
   # Count files in tree output
   tree -a -I 'node_modules|.git' | grep -c '‚îú‚îÄ‚îÄ\|‚îî‚îÄ‚îÄ' > tree_file_count.txt
   
   # Count files in your codebase-map.json
   grep -c '"name":' codebase-map.json > map_file_count.txt
   
   # Compare counts - they should match
   echo "Files in tree: $(cat tree_file_count.txt)"
   echo "Files in map: $(cat map_file_count.txt)"
   
   # If counts don't match, you missed files - scan again!
   ```

6. **CHUNKED CREATION STRATEGY:**
   - **Scan completely first**: Use tree command to get total file count
   - **Create chunks by directory**: Process one directory at a time
   - **Verify each chunk**: Ensure chunk contains all files from that directory
   - **Combine chunks**: Merge all chunks into final codebase-map.json
   - **Final verification**: Compare total file count with tree output
   - **No file left behind**: Every file from tree must be in final map
   - **No user review**: Proceed automatically through all chunks without stopping
   - **Automatic execution**: Complete chunked creation without user input

7. **Manual scan requirements:**
   - **Thorough**: Scan every directory, no exceptions
   - **Deep**: Go to the deepest levels of the directory tree
   - **Detailed**: Document every single file
   - **Accurate**: Provide meaningful descriptions and metadata
   - **Complete**: Include all files, not just source files
   - **Verified**: Use tree command to verify complete coverage
   - **ONE GO**: Create the entire map in one attempt, no partial mapping
   - **NO LIMITS**: File size doesn't matter, include everything
   - **NO SKIPPING**: Every file must be mapped, regardless of type or size
   - **NO USER REVIEW**: Proceed automatically without asking for user input
   - **AUTOMATIC**: Complete all steps without stopping for confirmation

8. **After manual scan completion:**
   - Save the manually created codebase-map.json
   - Verify JSON is valid
   - **CRITICAL**: Verify that file counts match between tree and map
   - Proceed to STEP 1 (dependency analysis)

**IMPORTANT:** Do NOT proceed to dependency analysis until you have manually scanned the entire codebase, created a complete codebase-map.json file, AND verified that every file from the tree command is included in your map.

**CRITICAL REQUIREMENTS:**
- **NO PARTIAL MAPPING**: You must map the ENTIRE codebase in one go
- **NO SIZE LIMITS**: The codebase-map.json can be as large as needed
- **NO SKIPPING**: Every single file must be included, regardless of size or complexity
- **COMPLETE COVERAGE**: All directories, subdirectories, and files must be mapped
- **ONE ATTEMPT**: Do not ask for partial mapping or break it into smaller chunks
- **VERIFICATION REQUIRED**: Use tree command to verify 100% coverage before proceeding
- **CHUNKED CREATION**: Create codebase-map.json in chunks to avoid output limits, but ensure complete coverage
- **NO USER REVIEW**: Do not ask user to review progress - proceed automatically through all steps
- **AUTOMATIC EXECUTION**: Complete the entire workflow without stopping for user input
- **EXISTENCE CHECKS**: Always check if directories/files exist before attempting to create them
- **AVOID DUPLICATES**: Never create directories or files that already exist

### STEP 1: Install and Setup Dependency-Cruiser
1. **Install dependency-cruiser:**
   ```bash
   # Using npm
   npm install dependency-cruiser
   
   # OR using yarn
   yarn add dependency-cruiser
   ```

2. **Create depCruiser directory (if not exists):**
   ```bash
   # Check if directory exists before creating
   if [ ! -d "depCruiser" ]; then
     mkdir -p depCruiser
     echo "üìÅ Created directory: depCruiser"
   else
     echo "üìÅ Directory already exists: depCruiser"
   fi
   ```

### STEP 2: Run Complete Fresh Scan
**This step replaces all manual dependency-cruiser commands with a single automated command.**

1. **Run the fresh scan command:**
   ```bash
   node update-codebase-map.js freshscan
   ```

2. **The freshscan command automatically:**
   - Creates depCruiser directory if it doesn't exist
   - Generates JSON dependency report
   - Generates HTML dependency report (optional)
   - Generates SVG dependency graph (optional)
   - Creates backup of existing codebase-map.json
   - **SYNCS with actual filesystem** (removes deleted files, adds new files)
   - **UPDATES codebase-map.json with dependency-cruiser output**
   - Adds detailed dependency information from the analysis
   - Includes file metadata (size, lines, language)
   - Updates dependency counts and types
   - Handles all files in the src/ directory recursively
   - **ENHANCES existing file entries with dependency data**

3. **What happens to codebase-map.json:**
   - **Filesystem sync**: Removes entries for deleted files, adds entries for new files
   - **Existing file entries are preserved** (descriptions, structure)
   - **Dependency information is added/updated** from dependency-cruiser
   - **File details are enhanced** with size, lines, language
   - **Dependency counts are calculated** and added
   - **Backup is created** before any changes

### STEP 3: Validation and Verification
1. **Check the updated codebase-map.json:**
   ```bash
   # Verify JSON is valid
   python3 -m json.tool codebase-map.json > /dev/null && echo "‚úÖ JSON is valid" || echo "‚ùå JSON has errors"
   
   # Count total files
   grep -c '"name":' codebase-map.json | head -1
   
   # Check for enhanced schema fields
   grep -c '"fileDetails"' codebase-map.json
   grep -c '"dependencyDetails"' codebase-map.json
   ```

2. **Compare with dependency-cruiser results:**
   ```bash
   # Count files in dependency-cruiser
   grep -c '"source":' codebase_scanner/depCruiser/dependency-report-new.json
   
   # Count files in codebase-map
   grep -c '"name":' codebase-map.json | head -1
   ```

## ALTERNATIVE COMMANDS

### Update Only (if dependency report already exists)
```bash
# Update codebase map only (requires existing dependency report)
node update-codebase-map.js update
```

### Show Help
```bash
# Show command usage and options
node update-codebase-map.js help
```

## JSON SCHEMA TEMPLATE
The updated codebase-map.json follows this enhanced schema:

```json
{
  "rootDirectory": "project-name",
  "subdirectories": [
    {
      "directory": "src",
      "files": [
        {
          "name": "Component.jsx",
          "description": "Component description",
          "lastUpdated": "2024-01-01",
          "dependencies": [
            {
              "name": "react",
              "type": "npm",
              "path": "node_modules/react",
              "dynamic": false,
              "circular": false,
              "valid": true,
              "followable": true
            }
          ],
          "testCoverage": {
            "hasTests": true,
            "testFiles": [
              "src/Component.test.jsx",
              "test/Component.spec.js"
            ],
            "testCount": 2
          },
          "dependents": [],
          "orphan": false,
          "valid": true,
          "moduleSystem": "es6",
          "fileDetails": {
            "size": "2.5K",
            "lines": 50,
            "language": "jsx",
            "entryPoint": false,
            "bundled": true,
            "treeShakeable": true,
            "sideEffects": false
          },
          "dependencyDetails": {
            "total": 3,
            "npm": 1,
            "local": 2,
            "core": 0,
            "dynamic": 0,
            "circular": 0,
            "unresolved": 0
          }
        }
      ],
      "subdirectories": []
    }
  ],
  "metadata": {
    "totalFiles": 50,
    "totalDependencies": 150,
    "dependencyAnalysis": {
      "source": "dependency-cruiser",
      "reportFile": "codebase_scanner/depCruiser/dependency-report-new.json",
      "analysisDate": "2024-01-01"
    }
  }
}
```

## TROUBLESHOOTING

### Common Issues:
1. **"codebase-map.json not found"**
   - Ensure you're running the script from the project root directory
   - **CRITICAL**: If codebase-map.json doesn't exist, you MUST perform a manual scan first (see STEP 0.5)
   - Do NOT proceed to dependency analysis without a complete manual scan

2. **"Incomplete scan detected"**
   - Use tree command to verify complete coverage: `tree -a -I 'node_modules|.git'`
   - Count files in tree vs codebase-map.json
   - If counts don't match, you missed files - scan again
   - Ensure every branch of directory tree is mapped

3. **"Partial mapping attempted"**
   - **STOP**: Do not create partial maps
   - You must map the ENTIRE codebase in one go
   - File size doesn't matter - include everything
   - Use tree command to ensure complete coverage
   - Create complete codebase-map.json with all files
   - **Use chunked creation**: Process directories one by one, then combine

4. **"Dependency analysis failed"**
   - Check that dependency-cruiser is installed
   - Verify that src/ directory exists
   - Check Node.js version (v14 or higher)

5. **"Output limits reached during JSON creation"**
   - Use chunked creation strategy
   - Process one directory at a time
   - Combine chunks into final codebase-map.json
   - Verify complete coverage after combining
   - Ensure no files are missed in the process

6. **"Permission errors"**
   - Ensure you have read/write permissions for the project directory
   - Check file permissions for codebase-map.json

7. **"HTML/SVG generation failed"**
   - These are optional features
   - HTML generation requires dependency-cruiser
   - SVG generation requires Graphviz installation

8. **"Agent asking for user review"**
   - **STOP**: Do not ask user to review progress
   - Proceed automatically through all steps
   - Complete the entire workflow without user input
   - Do not wait for confirmation or approval
   - Execute all commands and create all files automatically

9. **"Dependency information not updated in codebase-map.json"**
   - Ensure freshscan command completed successfully
   - Check that dependency-cruiser report was generated
   - Verify that codebase-map.json exists before running freshscan
   - The freshscan command should automatically update existing file entries with dependency data
   - Check backup files if the update failed

10. **"Deleted files still appear in codebase-map.json"**
    - The freshscan command automatically syncs with the filesystem
    - Deleted files should be removed automatically
    - New files should be added automatically
    - Check the console output for sync messages (üóëÔ∏è for deleted, ‚ûï for new)
    - Ensure the src/ directory path is correct

11. **"ES modules error or import/export issues"**
    - The project uses ES modules (`"type": "module"` in package.json)
    - Ensure Node.js version 14+ is being used
    - The update-codebase-map.js script uses import/export syntax
    - If using CommonJS, convert to ES modules or use .mjs extension

12. **"Directory or file already exists error"**
    - Always check if directories/files exist before creating them
    - Use existence checks: `if [ ! -d "directory" ]` or `if [ ! -f "file" ]`
    - For directories: `mkdir -p` is safe (won't error if exists)
    - For files: check existence before writing
    - The script handles existence checks automatically

### Validation Commands:
```bash
# Check script permissions
ls -la update-codebase-map.js

# Verify dependency-cruiser installation
source ~/.nvm/nvm.sh && nvm use node && npx dependency-cruiser --version

# Test script execution
node update-codebase-map.js help

# Verify complete scan coverage
tree -a -I 'node_modules|.git' | wc -l
grep -c '"name":' ../codebase-map.json

# Compare tree structure with map
tree -a -I 'node_modules|.git' > tree_verification.txt
echo "Tree files: $(tree -a -I 'node_modules|.git' | grep -c '‚îú‚îÄ‚îÄ\|‚îî‚îÄ‚îÄ')"
echo "Map files: $(grep -c '"name":' ../codebase-map.json)"

# Check if directories exist before creating
echo "Checking directory existence:"
[ -d "depCruiser" ] && echo "‚úÖ depCruiser/ exists" || echo "‚ùå depCruiser/ missing"
[ -d "backups" ] && echo "‚úÖ backups/ exists" || echo "‚ùå backups/ missing"
[ -f "../codebase-map.json" ] && echo "‚úÖ codebase-map.json exists" || echo "‚ùå codebase-map.json missing"
```

## AUTOMATION TIPS

### Add to package.json scripts:
```json
{
  "scripts": {
    "fresh-scan": "cd codebase_scanner && node update-codebase-map.js freshscan",
    "update-map": "cd codebase_scanner && node update-codebase-map.js update",
    "codebase-analysis": "npm run fresh-scan"
  }
}
```

### Run complete analysis:
```bash
npm run fresh-scan
```

## IMPORTANT NOTES:
- The `freshscan` command is the recommended approach for complete analysis
- Always run freshscan when you want to ensure the latest dependency data
- The script creates automatic backups before making changes
- The tool works with any project structure that has a src/ directory
- All file paths are relative to the project root directory
- The enhanced schema includes comprehensive dependency and file metadata
- **Test file detection is automatic** - the script finds test files using common naming patterns
- **Test coverage includes file paths** - when tests exist, the testCoverage field shows exact file locations
- Backups are stored in `codebase_scanner/backups/` directory
- **NO USER REVIEW**: Complete the entire workflow automatically without asking for user input
- **AUTOMATIC EXECUTION**: Proceed through all steps without stopping for confirmation
- **FRESHSCAN WORKFLOW**: Runs dependency-cruiser analysis and updates codebase-map.json with the results
- **DEPENDENCY INTEGRATION**: Existing file entries are enhanced with dependency information from dependency-cruiser
- **ES MODULES**: The project uses ES modules (`"type": "module"` in package.json) for modern Node.js compatibility
- **EXISTENCE CHECKS**: Always verify directories and files exist before attempting to create them
- **DUPLICATE PREVENTION**: The script automatically checks for existing directories and files
- **CLONED TOOL**: The codebase scanner is cloned into each project as `codebase_scanner/` directory
- **WORKING DIRECTORY**: Scripts run from within the `codebase_scanner/` directory

## üìÅ Directory Structure

```
project-root/
‚îú‚îÄ‚îÄ src/                                    # Your project source code
‚îú‚îÄ‚îÄ package.json                           # Your project package.json
‚îú‚îÄ‚îÄ codebase-map.json                      # Generated codebase map (in project root)
‚îî‚îÄ‚îÄ codebase_scanner/                      # Cloned codebase scanner tool
    ‚îú‚îÄ‚îÄ README.md                          # This file
    ‚îú‚îÄ‚îÄ make-codebase-map-prompt.txt       # LLM instructions and detailed workflow
    ‚îú‚îÄ‚îÄ update-codebase-map.js             # Main update script
    ‚îú‚îÄ‚îÄ package.json                       # Tool package.json
    ‚îú‚îÄ‚îÄ depCruiser/                        # Dependency analysis reports
    ‚îÇ   ‚îú‚îÄ‚îÄ dependency-report-new.json     # JSON dependency report
    ‚îÇ   ‚îú‚îÄ‚îÄ dependency-report-new.html     # HTML dependency report
    ‚îÇ   ‚îî‚îÄ‚îÄ dependency-graph-new.svg       # SVG dependency graph
    ‚îî‚îÄ‚îÄ backups/                           # Automatic backups
        ‚îî‚îÄ‚îÄ codebase-map-backup-*.json     # Timestamped backups
``` 